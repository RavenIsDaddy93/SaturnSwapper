#include <DiscordSDK/rapidjson/document.h>
#include <Crypt/skCrypter.h>

#include "Saturn/Log.h"
#include "Saturn/Defines.h"

#include <windows.h>
#include <process.h>
#include <Tlhelp32.h>
#include <winbase.h>
#include <ShlObj_core.h>

import Saturn.FortniteFunctionLibrary;

import <string>;
import <vector>;
import <fstream>;
import <sstream>;
import <filesystem>;

import Saturn.Config;
import Saturn.Context;
import Saturn.Structs.FileInfo;
import Saturn.Readers.FileReader;
import Saturn.Items.LoadoutModel;
import Saturn.Paths.SoftObjectPath;
import Saturn.WindowsFunctionLibrary;
import Saturn.Readers.ZenPackageReader;

std::string FortniteFunctionLibrary::GetFortniteInstallationPath() {
	static const std::string DRIVES[] = { "A:\\", "B:\\", "C:\\", "D:\\", "E:\\", "F:\\", "G:\\", "H:\\", "I:\\", "J:\\", "K:\\", "L:\\", "M:\\" };

	std::string filePath;
	for (auto& drive : DRIVES) {
		filePath = drive + "ProgramData\\Epic\\UnrealEngineLauncher\\LauncherInstalled.dat";

		if (std::filesystem::exists(filePath)) {
			break;
		}
	}

	std::ifstream ifs(filePath);
	std::string content((std::istreambuf_iterator<char>(ifs)), (std::istreambuf_iterator<char>()));
	ifs.close();

	rapidjson::Document json;
	json.Parse(content.c_str());

	for (rapidjson::Value& iteration : json["InstallationList"].GetArray()) {
		std::string appName = iteration["AppName"].GetString();
		if (appName == "Fortnite") {
			std::string installLocation = iteration["InstallLocation"].GetString();
			return installLocation + "\\FortniteGame\\Content\\Paks\\";
		}
	}

	return "NOTFOUND";
}

std::string FortniteFunctionLibrary::GetFortniteAESKey() {
	static std::tuple<int, std::string> stringData = WindowsFunctionLibrary::GetRequest("https://fortnite-api.com/v2/aes");

	if (std::get<0>(stringData) != 200) {
		return "ERROR";
	}

	rapidjson::Document json;
	json.Parse(std::get<1>(stringData).c_str());

	try {
		std::string mainKey = json["data"]["mainKey"].GetString();
		if (mainKey.empty() || mainKey == "null") {
			return "ERROR";
		}

		return mainKey;
	}
	catch (std::exception e) {
		return "ERROR";
	}
}

std::wstring FortniteFunctionLibrary::GetFortniteLocalPath() {
	std::wstringstream ss;

	wchar_t* localAppData = 0;
	SHGetKnownFolderPath(FOLDERID_LocalAppData, 0, NULL, &localAppData);

	ss << localAppData << L"\\FortniteGame\\Saved\\";

	CoTaskMemFree(static_cast<void*>(localAppData));

	return ss.str();
}

bool FortniteFunctionLibrary::PatchEpicGames() {
	static bool bHasOccurred = false;
	if (bHasOccurred) return true;
	bHasOccurred = true;

	static std::vector<uint8_t> NOTIFICATION_PATTERN = { 0x44,0x3A,0x5C,0x62,0x75,0x69,0x6C,0x64,0x5C,0x2B,0x2B,0x50,0x6F,0x72,0x74,0x61,0x6C,0x5C,0x53,0x79,0x6E,0x63,0x5C,0x50,0x6F,0x72,0x74,0x61,0x6C,0x5C,0x53,0x6F,0x75,0x72,0x63,0x65,0x5C,0x50,0x72,0x6F,0x67,0x72,0x61,0x6D,0x73,0x5C,0x45,0x70,0x69,0x63,0x47,0x61,0x6D,0x65,0x73,0x4C,0x61,0x75,0x6E,0x63,0x68,0x65,0x72,0x5C,0x4C,0x61,0x79,0x65,0x72,0x73,0x5C,0x44,0x61,0x74,0x61,0x41,0x63,0x63,0x65,0x73,0x73,0x5C,0x50,0x75,0x62,0x6C,0x69,0x63,0x5C,0x4E,0x6F,0x74,0x69,0x66,0x69,0x63,0x61,0x74,0x69,0x6F,0x6E,0x2E,0x68,0x00,0x21,0x47,0x65,0x74,0x50,0x65,0x72,0x73,0x69,0x73,0x74,0x28,0x29 };
	static std::vector<uint8_t> VERIFICATION_PATTERN = { 0x44,0x3A,0x2F,0x62,0x75,0x69,0x6C,0x64,0x2F,0x2B,0x2B,0x50,0x6F,0x72,0x74,0x61,0x6C,0x2F,0x53,0x79,0x6E,0x63,0x2F,0x45,0x6E,0x67,0x69,0x6E,0x65,0x2F,0x53,0x6F,0x75,0x72,0x63,0x65,0x2F,0x52,0x75,0x6E,0x74,0x69,0x6D,0x65,0x2F,0x43,0x6F,0x72,0x65,0x2F,0x50,0x72,0x69,0x76,0x61,0x74,0x65,0x2F,0x57,0x69,0x6E,0x64,0x6F,0x77,0x73,0x2F,0x57,0x69,0x6E,0x64,0x6F,0x77,0x73,0x45,0x72,0x72,0x6F,0x72,0x4F,0x75,0x74,0x70,0x75,0x74,0x44,0x65,0x76,0x69,0x63,0x65,0x2E,0x63,0x70,0x70 };

	try {
		std::string filePath = _("C:\\Program Files (x86)\\Epic Games\\Launcher\\Portal\\Binaries\\Win64\\EpicGamesLauncher.exe");
		if (!std::filesystem::exists(filePath)) {
			filePath = _("D:\\Program Files (x86)\\Epic Games\\Launcher\\Portal\\Binaries\\Win64\\EpicGamesLauncher.exe");
		}

		FFileReader reader(filePath.c_str());
		reader.Seek(reader.TotalSize() - 6);

		static std::string TamelySig = "Tamely";
		char data[6];

		reader.Serialize(data, 6);

		if (std::string(data) != TamelySig) {
			char diffData[59];
			memset(diffData, 0, 59);

			reader.Seek(reader.TotalSize());
			reader.WriteBuffer((char*)TamelySig.c_str(), 6);

			size_t offset = WindowsFunctionLibrary::FindArrayInFile(&reader.FileStream, NOTIFICATION_PATTERN) + NOTIFICATION_PATTERN.size();
			reader.Seek(offset);
			reader.WriteBuffer(diffData, 59);

			offset = WindowsFunctionLibrary::FindArrayInFile(&reader.FileStream, VERIFICATION_PATTERN) + VERIFICATION_PATTERN.size();
			reader.Seek(offset);
			reader.WriteBuffer(diffData, 59);
		}

		reader.Close();

		return true;
	}
	catch (std::exception e) {
		return false;
	}
}

bool FortniteFunctionLibrary::PatchFortnite(const FLoadout& Loadout) {
	FortniteFunctionLibrary::KillEpicProcesses();

	UPackagePtr package = FContext::Provider->LoadPackage(Loadout.Skin.PackagePath + ".uasset");
	UObjectPtr firstExport = package->GetFirstExport();

	std::vector<FSoftObjectPath> characterParts = firstExport->GetProperty<std::vector<FSoftObjectPath>>("BaseCharacterParts");

	for (FSoftObjectPath& characterPart : characterParts) {
		LOG_INFO("CharacterPart '{0}'", characterPart.GetAssetPathString());
	}

	/*
	try {
		uint8_t* asset = ASSET_DATA;

		for (int i = 0; i < 5; i++) {
			std::string id;
			uint8_t* searchId = nullptr;
			uint8_t* replaceId = nullptr;
			int replaceLength = 0;

			switch (i) {
			case 0:
				if (!FContext::Loadout.Skin.IsValid()) {
					continue;
				}

				searchId = new uint8_t[]{ 0x2F,0x47,0x61,0x6D,0x65,0x2F,0x54,0x68,0x69,0x73,0x2F,0x53,0x68,0x6F,0x75,0x6C,0x64,0x2F,0x42,0x65,0x2F,0x4C,0x6F,0x6E,0x67,0x2F,0x45,0x6E,0x6F,0x75,0x67,0x68,0x2F,0x54,0x6F,0x2F,0x53,0x77,0x61,0x70,0x2F,0x57,0x69,0x74,0x68,0x2F,0x41,0x6E,0x79,0x2F,0x43,0x6F,0x73,0x6D,0x65,0x74,0x69,0x63,0x2F,0x4F,0x77,0x65,0x6E,0x2F,0x49,0x73,0x2F,0x54,0x68,0x65,0x2F,0x42,0x65,0x73,0x74,0x2F,0x44,0x65,0x76,0x65,0x6C,0x6F,0x70,0x65,0x72,0x2F,0x43,0x68,0x61,0x72,0x61,0x63,0x74,0x65,0x72,0x2F,0x4F,0x77,0x65,0x6E,0x2F,0x49,0x73,0x2F,0x54,0x68,0x65,0x2F,0x42,0x65,0x73,0x74,0x2F,0x44,0x65,0x76,0x65,0x6C,0x6F,0x70,0x65,0x72,0x2F,0x4F,0x77,0x65,0x6E,0x2F,0x49,0x73,0x2F,0x54,0x68,0x65,0x2F,0x42,0x65,0x73,0x74,0x2F,0x44,0x65,0x76,0x65,0x6C,0x6F,0x70,0x65,0x72,0x2F,0x4F,0x77,0x65,0x6E,0x2F,0x49,0x73,0x2F,0x54,0x68,0x65,0x2F,0x42,0x65,0x73,0x74,0x2F,0x44,0x65,0x76,0x65,0x6C,0x6F,0x70,0x65,0x72,0x2F,0x4F,0x77,0x65,0x6E,0x2F,0x49,0x73,0x2F,0x54,0x68,0x65,0x2F,0x42,0x65,0x73,0x74,0x2F,0x44,0x65,0x76,0x65,0x6C,0x6F,0x70,0x65,0x72 };

				replaceLength = 203;
				replaceId = new uint8_t[203];
				memset(replaceId, 0, 203);

				id = FContext::Loadout.Skin.PackagePath + "." + FContext::Loadout.Skin.Id;
				break;
			case 1:
				if (!FContext::Loadout.Backbling.IsValid()) {
					continue;
				}

				searchId = new uint8_t[]{ 0x2F,0x47,0x61,0x6D,0x65,0x2F,0x54,0x68,0x69,0x73,0x2F,0x53,0x68,0x6F,0x75,0x6C,0x64,0x2F,0x42,0x65,0x2F,0x4C,0x6F,0x6E,0x67,0x2F,0x45,0x6E,0x6F,0x75,0x67,0x68,0x2F,0x54,0x6F,0x2F,0x53,0x77,0x61,0x70,0x2F,0x57,0x69,0x74,0x68,0x2F,0x41,0x6E,0x79,0x2F,0x43,0x6F,0x73,0x6D,0x65,0x74,0x69,0x63,0x2F,0x4F,0x77,0x65,0x6E,0x2F,0x49,0x73,0x2F,0x54,0x68,0x65,0x2F,0x42,0x65,0x73,0x74,0x2F,0x44,0x65,0x76,0x65,0x6C,0x6F,0x70,0x65,0x72,0x2F,0x42,0x61,0x63,0x6B,0x70,0x61,0x63,0x6B,0x2F,0x4F,0x77,0x65,0x6E,0x2F,0x49,0x73,0x2F,0x54,0x68,0x65,0x2F,0x42,0x65,0x73,0x74,0x2F,0x44,0x65,0x76,0x65,0x6C,0x6F,0x70,0x65,0x72,0x2F,0x4F,0x77,0x65,0x6E,0x2F,0x49,0x73,0x2F,0x54,0x68,0x65,0x2F,0x42,0x65,0x73,0x74,0x2F,0x44,0x65,0x76,0x65,0x6C,0x6F,0x70,0x65,0x72,0x2F,0x4F,0x77,0x65,0x6E,0x2F,0x49,0x73,0x2F,0x54,0x68,0x65,0x2F,0x42,0x65,0x73,0x74,0x2F,0x44,0x65,0x76,0x65,0x6C,0x6F,0x70,0x65,0x72,0x2F,0x4F,0x77,0x65,0x6E,0x2F,0x49,0x73,0x2F,0x54,0x68,0x65,0x2F,0x42,0x65,0x73,0x74,0x2F,0x44,0x65,0x76,0x65,0x6C,0x6F,0x70,0x65,0x72 };

				replaceLength = 202;
				replaceId = new uint8_t[202];
				memset(replaceId, 0, 202);

				id = FContext::Loadout.Backbling.PackagePath + "." + FContext::Loadout.Backbling.Id;
				break;
			case 2:
				if (!FContext::Loadout.Pickaxe.IsValid()) {
					continue;
				}

				searchId = new uint8_t[]{ 0x2F,0x47,0x61,0x6D,0x65,0x2F,0x54,0x68,0x69,0x73,0x2F,0x53,0x68,0x6F,0x75,0x6C,0x64,0x2F,0x42,0x65,0x2F,0x4C,0x6F,0x6E,0x67,0x2F,0x45,0x6E,0x6F,0x75,0x67,0x68,0x2F,0x54,0x6F,0x2F,0x53,0x77,0x61,0x70,0x2F,0x57,0x69,0x74,0x68,0x2F,0x41,0x6E,0x79,0x2F,0x43,0x6F,0x73,0x6D,0x65,0x74,0x69,0x63,0x2F,0x4F,0x77,0x65,0x6E,0x2F,0x49,0x73,0x2F,0x54,0x68,0x65,0x2F,0x42,0x65,0x73,0x74,0x2F,0x44,0x65,0x76,0x65,0x6C,0x6F,0x70,0x65,0x72,0x2F,0x50,0x69,0x63,0x6B,0x61,0x78,0x65,0x2F,0x4F,0x77,0x65,0x6E,0x2F,0x49,0x73,0x2F,0x54,0x68,0x65,0x2F,0x42,0x65,0x73,0x74,0x2F,0x44,0x65,0x76,0x65,0x6C,0x6F,0x70,0x65,0x72,0x2F,0x4F,0x77,0x65,0x6E,0x2F,0x49,0x73,0x2F,0x54,0x68,0x65,0x2F,0x42,0x65,0x73,0x74,0x2F,0x44,0x65,0x76,0x65,0x6C,0x6F,0x70,0x65,0x72,0x2F,0x4F,0x77,0x65,0x6E,0x2F,0x49,0x73,0x2F,0x54,0x68,0x65,0x2F,0x42,0x65,0x73,0x74,0x2F,0x44,0x65,0x76,0x65,0x6C,0x6F,0x70,0x65,0x72,0x2F,0x4F,0x77,0x65,0x6E,0x2F,0x49,0x73,0x2F,0x54,0x68,0x65,0x2F,0x42,0x65,0x73,0x74,0x2F,0x44,0x65,0x76,0x65,0x6C,0x6F,0x70,0x65,0x72 };

				replaceLength = 201;
				replaceId = new uint8_t[201];
				memset(replaceId, 0, 201);

				id = FContext::Loadout.Pickaxe.PackagePath + "." + FContext::Loadout.Pickaxe.Id;
				break;
			case 3:
				if (FContext::Channel == "") {
					continue;
				}

				searchId = new uint8_t[]{ 0x54,0x68,0x69,0x73,0x2E,0x56,0x61,0x72,0x69,0x61,0x6E,0x74,0x2E,0x43,0x68,0x61,0x6E,0x6E,0x65,0x6C,0x2E,0x54,0x61,0x67,0x2E,0x53,0x68,0x6F,0x75,0x6C,0x64,0x2E,0x42,0x65,0x2E,0x4C,0x6F,0x6E,0x67,0x2E,0x45,0x6E,0x6F,0x75,0x67,0x68,0x2E,0x46,0x6F,0x72,0x2E,0x41,0x6E,0x79,0x2E,0x47,0x61,0x6D,0x65,0x70,0x6C,0x61,0x79,0x2E,0x54,0x61,0x67 };

				replaceLength = 67;
				replaceId = new uint8_t[67];
				memset(replaceId, 0, 67);

				id = FContext::Channel;
				break;
			case 4:
				if (FContext::Variant == "") {
					continue;
				}

				searchId = new uint8_t[]{ 0x54,0x68,0x69,0x73,0x2E,0x43,0x75,0x73,0x74,0x6F,0x6D,0x69,0x7A,0x61,0x74,0x69,0x6F,0x6E,0x2E,0x56,0x61,0x72,0x69,0x61,0x6E,0x74,0x2E,0x54,0x61,0x67,0x2E,0x53,0x68,0x6F,0x75,0x6C,0x64,0x2E,0x42,0x65,0x2E,0x4C,0x6F,0x6E,0x67,0x2E,0x45,0x6E,0x6F,0x75,0x67,0x68,0x2E,0x46,0x6F,0x72,0x2E,0x41,0x6E,0x79,0x2E,0x47,0x61,0x6D,0x65,0x70,0x6C,0x61,0x79,0x2E,0x54,0x61,0x67 };

				replaceLength = 73;
				replaceId = new uint8_t[73];
				memset(replaceId, 0, 73);

				id = FContext::Variant;
				break;
			}

			memcpy(replaceId, id.c_str(), id.size());

			uint8_t* searchOffset = WindowsFunctionLibrary::FindSubArray(asset, ASSET_LENGTH, searchId, replaceLength);
			memcpy(searchOffset, replaceId, replaceLength);

			delete[] searchId;
			delete[] replaceId;
		}

		std::shared_ptr<IoStoreReader> reader = std::make_shared<IoStoreReader>(FortniteFunctionLibrary::GetFortniteInstallationPath() + _("pakchunk10-WindowsClient.utoc"));
		FContext::Writer = std::make_shared<IoStoreWriter>(reader);

		bool hasBeenDone = FConfig::UcasSize != INT64_MAX;
		FContext::Writer->OverwriteFileWithBouncer(_("../../../FortniteGame/Content/Athena/HUD/AthenaScoreAlert.uasset"), _("../../../FortniteGame/Content/Characters/Enemies/Husk_Deimos_Husky/Textures/T_Husk_Deimos_Husky_03_Gold_D.ubulk"), asset, ASSET_LENGTH);

		if (!hasBeenDone) {
			std::shared_ptr<IoStoreReader> reader2 = std::make_shared<IoStoreReader>(FortniteFunctionLibrary::GetFortniteInstallationPath() + _("pakchunk20-WindowsClient.utoc"));
			FContext::SecondWriter = std::make_shared<IoStoreWriter>(reader2);

			FContext::SecondWriter->InvalidateFile(_("../../../FortniteGame/Content/Athena/Heroes/Meshes/Bodies/CP_Athena_Body_F_Prime_A.uasset")); // 20
			FContext::Writer->InvalidateFile(_("../../../FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/Meshes/Bodies/CP_Athena_Body_F_Prime_B.uasset")); // 10
			FContext::Writer->InvalidateFile(_("../../../FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/Meshes/Bodies/CP_Athena_Body_F_Prime_C.uasset")); // 10
			FContext::Writer->InvalidateFile(_("../../../FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/Meshes/Bodies/CP_Athena_Body_F_Prime.uasset")); // 10
			FContext::Writer->InvalidateFile(_("../../../FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/Meshes/Bodies/CP_Athena_Body_F_Prime_E.uasset")); // 10
			FContext::Writer->InvalidateFile(_("../../../FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/Meshes/Bodies/CP_Athena_Body_F_Prime_G.uasset")); // 10
			FContext::Writer->InvalidateFile(_("../../../FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/Meshes/Bodies/CP_Athena_Body_M_Prime.uasset")); // 10
			FContext::Writer->InvalidateFile(_("../../../FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/Meshes/Bodies/CP_Athena_Body_M_Prime_G.uasset")); // 10

			reader2->Close();
			FContext::SecondWriter->Close();
		}

		reader->Close();
		FContext::Writer->Close();

		FConfig::Save();

		return true;
	}
	catch (std::exception e) {
		return false;
	}*/
	return true;
}

void FortniteFunctionLibrary::LaunchFortnite() {
	system("cmd.exe /C start com.epicgames.launcher://apps/Fortnite?action=launch");
}

void FortniteFunctionLibrary::KillEpicProcesses() {
	static std::string Processes[] = { "EpicGamesLauncher.exe", "FortniteLauncher.exe", "FortniteClient-Win64-Shipping.exe", "FortniteClient-Win64-Shipping_BE.exe", "FortniteClient-Win64-Shipping_EAC.exe", "FortniteClient-Win64-Shipping_EAC_EOS.exe", "CrashReportClient.exe", "EpicGamesLauncher", "FortniteLauncher", "FortniteClient-Win64-Shipping", "FortniteClient-Win64-Shipping_BE", "FortniteClient-Win64-Shipping_EAC", "FortniteClient-Win64-Shipping_EAC_EOS", "CrashReportClient" };
	for (auto& proc : Processes) {
		FortniteFunctionLibrary::KillProcessByName(proc.c_str());
	}
}

void FortniteFunctionLibrary::KillProcessByName(const char* procName) {
	HANDLE hSnapShot = CreateToolhelp32Snapshot(TH32CS_SNAPALL, NULL);
	PROCESSENTRY32 pEntry;
	pEntry.dwSize = sizeof(pEntry);
	BOOL hRes = Process32First(hSnapShot, &pEntry);
	while (hRes)
	{
		if (strcmp(pEntry.szExeFile, procName) == 0)
		{
			HANDLE hProcess = OpenProcess(PROCESS_TERMINATE, 0,
				(DWORD)pEntry.th32ProcessID);
			if (hProcess != NULL)
			{
				TerminateProcess(hProcess, 9);
				CloseHandle(hProcess);
			}
		}
		hRes = Process32Next(hSnapShot, &pEntry);
	}
	CloseHandle(hSnapShot);
}